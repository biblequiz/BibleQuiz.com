---
import type {
    SidebarEntry,
    SidebarLink,
} from "@astrojs/starlight/utils/routing/types";
import { Icon, Badge } from "@astrojs/starlight/components";
import SidebarRestorePoint from "@components/sidebar/SidebarRestorePoint.astro";
import SidebarTableOfContents from "@components/sidebar/SidebarTableOfContents.astro";
import FontAwesomeIcon from "@components/FontAwesomeIcon";
import type { TocItem } from "@astrojs/starlight/utils/generateToC";
import AuthButton from "../auth/AuthButton";

interface Props {
    sublist: SidebarEntry[];
    nested?: boolean;
    toc: TocItem[] | null;
}

function flattenSidebar(sidebar: SidebarEntry[]): SidebarLink[] {
    return sidebar.flatMap((entry) =>
        entry.type === "group" ? flattenSidebar(entry.entries) : entry,
    );
}

const { sublist, nested, toc } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
    {
        sublist.map((entry) => (
            <li class={entry.type === "authButton" ? "md:sl-hidden" : ""}>
                {entry.type == "authButton" && (
                    <AuthButton isMobile={true} client:only="react" />
                )}
                {entry.type === "link" && (
                    <div>
                        <a
                            href={entry.href}
                            aria-current={entry.isCurrent && "page"}
                            class:list={[{ large: !nested }, entry.attrs.class]}
                            {...entry.attrs}
                        >
                            {entry.attrs.icon && (
                                <FontAwesomeIcon icon={entry.attrs.icon} />
                            )}
                            <span>{entry.label}</span>
                            {entry.badge && (
                                <Badge
                                    variant={entry.badge.variant}
                                    class={entry.badge.class}
                                    text={entry.badge.text}
                                />
                            )}
                        </a>
                        {entry.isCurrent && toc && toc.length > 1 && (
                            <details open={true} class="tocDetails caret">
                                <summary class="tocSummary">
                                    <span>
                                        <b>On this page</b>
                                    </span>
                                </summary>
                                <SidebarTableOfContents toc={toc} />
                            </details>
                        )}
                    </div>
                )}
                {entry.type === "group" && (
                    <details
                        open={
                            flattenSidebar(entry.entries).some(
                                (i) => i.isCurrent,
                            ) || !entry.collapsed
                        }
                    >
                        <SidebarRestorePoint />
                        <summary>
                            <div class="group-label">
                                <span class="large">{entry.label}</span>
                                {entry.badge && (
                                    <Badge
                                        variant={entry.badge.variant}
                                        class={entry.badge.class}
                                        text={entry.badge.text}
                                    />
                                )}
                            </div>
                            <Icon
                                name="right-caret"
                                class="caret"
                                size="1.25rem"
                            />
                        </summary>
                        <Astro.self sublist={entry.entries} toc={toc} nested />
                    </details>
                )}
            </li>
        ))
    }
</ul>

<style>
    @layer starlight.core {
        ul {
            --sl-sidebar-item-padding-inline: 0.5rem;
            list-style: none;
            padding: 0;
        }

        li {
            overflow-wrap: anywhere;
        }

        ul ul li {
            margin-inline-start: var(--sl-sidebar-item-padding-inline);
            border-inline-start: 1px solid var(--sl-color-hairline-light);
            padding-inline-start: var(--sl-sidebar-item-padding-inline);
        }

        .large {
            font-size: var(--sl-text-lg);
            font-weight: 600;
            color: var(--sl-color-white);
        }

        .top-level > li + li {
            margin-top: 0.75rem;
        }

        summary {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.2em var(--sl-sidebar-item-padding-inline);
            line-height: 1.4;
            cursor: pointer;
            user-select: none;
        }
        summary::marker,
        summary::-webkit-details-marker {
            display: none;
        }

        summary.tocSummary {
            font-size: var(--sl-text-sm);
        }

        details.tocDetails {
            padding-left: var(--sl-sidebar-item-padding-inline);
        }

        .caret {
            transition: transform 0.2s ease-in-out;
            flex-shrink: 0;
        }
        :global([dir="rtl"]) .caret {
            transform: rotateZ(180deg);
        }
        [open] > summary .caret {
            transform: rotateZ(90deg);
        }

        a {
            display: block;
            border-radius: 0.25rem;
            text-decoration: none;
            color: var(--sl-color-gray-2);
            padding: 0.3em var(--sl-sidebar-item-padding-inline);
            line-height: 1.4;
        }

        a:hover,
        a:focus {
            color: var(--sl-color-white);
        }

        [aria-current="page"],
        [aria-current="page"]:hover,
        [aria-current="page"]:focus {
            font-weight: 600;
            color: var(--sl-color-text-invert);
            background-color: var(--sl-color-text-accent);
        }

        a > *:not(:last-child),
        .group-label > *:not(:last-child) {
            margin-inline-end: 0.25em;
        }

        @media (min-width: 50rem) {
            .top-level > li + li {
                margin-top: 0.5rem;
            }
            .large {
                font-size: var(--sl-text-base);
            }
            a {
                font-size: var(--sl-text-sm);
            }
        }
    }
</style>
