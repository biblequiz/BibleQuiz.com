---
// @ts-nocheck
import type {
    SidebarEntry,
    SidebarLink,
} from "@astrojs/starlight/utils/routing/types";
import { Icon, Badge } from "@astrojs/starlight/components";
import SidebarRestorePoint from "components/sidebar/SidebarRestorePoint.astro";
import SidebarTableOfContents from "components/sidebar/SidebarTableOfContents.astro";
import FontAwesomeIcon from "components/FontAwesomeIcon";
// @ts-nocheck
import type { TocItem } from "@astrojs/starlight/utils/generateToC";
import AuthButton, { AuthButtonType } from "../auth/AuthButton";
import ReactSidebar from "./ReactSidebar";
import "./sidebar-sublist.css";

interface Props {
    sublist: SidebarEntry[];
    nested?: boolean;
    toc: TocItem[] | null;
}

function flattenSidebar(sidebar: SidebarEntry[]): SidebarLink[] {
    return sidebar.flatMap((entry) =>
        entry.type === "group" ? flattenSidebar(entry.entries) : entry,
    );
}

const { sublist, nested, toc = false } = Astro.props;
---

<ul class:list={{ "top-level": !nested }}>
    {
        sublist.map((entry) => {
            const renderAsReactEntry =
                entry.isCurrent && (entry.attrs?.useReactSidebar ?? false);
            return (
                <li class={entry.type === "authButton" ? "md:sl-hidden" : ""}>
                    {entry.type == "authButton" && (
                        <AuthButton
                            type={AuthButtonType.Mobile}
                            client:only="react"
                        />
                    )}
                    {!renderAsReactEntry && entry.type === "link" && (
                        <div>
                            <a
                                href={entry.attrs?.href || entry.href}
                                aria-current={entry.isCurrent && "page"}
                                class:list={[
                                    { large: !nested },
                                    entry.attrs.class,
                                ]}
                                {...entry.attrs}
                            >
                                {entry.attrs.icon && (
                                    <FontAwesomeIcon icon={entry.attrs.icon} />
                                )}
                                <span>{entry.label}</span>
                                {entry.badge && (
                                    <Badge
                                        variant={entry.badge.variant}
                                        class={entry.badge.class}
                                        text={entry.badge.text}
                                    />
                                )}
                            </a>
                            {entry.isCurrent && toc && toc.length > 1 && (
                                <details open={true} class="tocDetails caret">
                                    <summary class="tocSummary">
                                        <span>
                                            <b>On this page</b>
                                        </span>
                                    </summary>
                                    <SidebarTableOfContents toc={toc} />
                                </details>
                            )}
                        </div>
                    )}
                    {(renderAsReactEntry || entry.type === "group") && (
                        <details
                            open={
                                !entry.collapsed ||
                                renderAsReactEntry ||
                                flattenSidebar(entry.entries).some(
                                    (i) => i.isCurrent,
                                )
                            }
                        >
                            {!renderAsReactEntry && <SidebarRestorePoint />}
                            <summary>
                                <div class="group-label">
                                    <span class="large">{entry.label}</span>
                                    {entry.badge && (
                                        <Badge
                                            variant={entry.badge.variant}
                                            class={entry.badge.class}
                                            text={entry.badge.text}
                                        />
                                    )}
                                </div>
                                <Icon
                                    name="right-caret"
                                    class="caret"
                                    size="1.25rem"
                                />
                            </summary>
                            {renderAsReactEntry && (
                                <>
                                    <div
                                        id="react-sidebar-fallback"
                                        class="flex justify-center"
                                    >
                                        <span class="loading loading-spinner loading-sm" />
                                        <span class="text-sm">
                                            &nbsp;Loading Menu Items
                                        </span>
                                    </div>
                                    <ReactSidebar
                                        loadingElementId="react-sidebar-fallback"
                                        nested={true}
                                        client:only="react"
                                    />
                                </>
                            )}
                            {!renderAsReactEntry && (
                                <Astro.self
                                    sublist={entry.entries}
                                    toc={toc}
                                    nested
                                />
                            )}
                        </details>
                    )}
                </li>
            );
        })
    }
</ul>